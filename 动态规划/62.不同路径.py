'''
一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为 “Start” ）。

机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为 “Finish” ）。

问总共有多少条不同的路径？

示例 1：
输入：m = 3, n = 7
输出：28

示例 2：
输入：m = 3, n = 2
输出：3
解释：
从左上角开始，总共有 3 条路径可以到达右下角。
1. 向右 -> 向下 -> 向下
2. 向下 -> 向下 -> 向右
3. 向下 -> 向右 -> 向下

示例 3：
输入：m = 7, n = 3
输出：28

示例 4：
输入：m = 3, n = 3
输出：6
---—————————————————————————————————————————————————————————————
因为有两个状态，所以要用二维dp数组      dp[i][j]
1.dp数组的含义
dp[0][0] 到 dp[i][j] 有多少种不同的路径，如 dp[1][2] 意思就是从dp[0][0] 走到 dp[1][2]一共有多少种不同的走法

2.递推公式，基于dp数组含义的一个推导


'''


class Solution:
    def uniquePaths(self, m: int, n: int) -> int:


if __name__ == "__main__":
    s = Solution()
    print(s.uniquePaths(m, n))